// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sejamuchhal/taskhub/task/events (interfaces: RabbitMQBrokerInterface)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod --destination=./events/mock_rabbitmq/rabbitmq.go github.com/sejamuchhal/taskhub/task/events RabbitMQBrokerInterface
//

// Package mock_events is a generated GoMock package.
package mock_events

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRabbitMQBrokerInterface is a mock of RabbitMQBrokerInterface interface.
type MockRabbitMQBrokerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQBrokerInterfaceMockRecorder
}

// MockRabbitMQBrokerInterfaceMockRecorder is the mock recorder for MockRabbitMQBrokerInterface.
type MockRabbitMQBrokerInterfaceMockRecorder struct {
	mock *MockRabbitMQBrokerInterface
}

// NewMockRabbitMQBrokerInterface creates a new mock instance.
func NewMockRabbitMQBrokerInterface(ctrl *gomock.Controller) *MockRabbitMQBrokerInterface {
	mock := &MockRabbitMQBrokerInterface{ctrl: ctrl}
	mock.recorder = &MockRabbitMQBrokerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQBrokerInterface) EXPECT() *MockRabbitMQBrokerInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockRabbitMQBrokerInterface) Publish(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitMQBrokerInterfaceMockRecorder) Publish(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitMQBrokerInterface)(nil).Publish), arg0)
}
